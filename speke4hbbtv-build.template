AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Outputs:
  RestAPIId:
    Value:
      Ref: RestAPI
  APIHandlerName:
    Value:
      Ref: APIHandler
  APIHandlerArn:
    Value:
      Fn::GetAtt:
      - APIHandler
      - Arn
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/
  MPAccessRoleArn:
    Value:
      Fn::GetAtt:
      - mpAccessRole
      - Arn
    Description: SPEKE access role for MediaPackage
  KeyServerURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/get/keys
Resources:
  DefaultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
        PolicyName: DefaultRolePolicy
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: EDGE
      StageName: api
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title: speke4hbbtv
        schemes:
        - https
        paths:
          /get/keys:
            get:
              consumes:
              - application/xml
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - sigv4: []
            post:
              consumes:
              - application/xml
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
              security:
              - sigv4: []
        definitions:
          Empty:
            type: object
            title: Empty Schema
        x-amazon-apigateway-binary-media-types:
        - application/octet-stream
        - application/x-tar
        - application/zip
        - audio/basic
        - audio/ogg
        - audio/mp4
        - audio/mpeg
        - audio/wav
        - audio/webm
        - image/png
        - image/jpg
        - image/jpeg
        - image/gif
        - video/ogg
        - video/mpeg
        - video/webm
        securityDefinitions:
          sigv4:
            in: header
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authtype: awsSigv4
  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: app.app
      CodeUri: s3://subinh-pkgbuild/8a6919dc5f7016e2612aa2fd95ea8c31
      Tags:
        aws-chalice: version=1.10.0:stage=dev:app=speke4hbbtv
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          CONTENTID:
            Ref: RESOURCEID
          KID:
            Ref: KID
          PSSH:
            Ref: PSSH
          PROHEADER:
            Ref: PROHEADER
          MYKEY:
            Ref: MYKEY
          DEBUGMODE: ENABLED
      Role:
        Fn::GetAtt:
        - DefaultRole
        - Arn
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: APIHandler
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
        - RestAPIId:
            Ref: RestAPI
  mpAccessRole:
    Description: Role for MediaPackage to access SPEKE
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: mediapackage.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: mpAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: execute-api:Invoke
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:execute-api:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':'
                - Ref: RestAPI
                - /*/POST/*
Description: CF Template to create iam roles to access SPEKE server
Metadata: {}
Parameters:
  KID:
    Description: KID value (Guid)
    Type: String
    Default: ''
  PSSH:
    Description: Playready PSSH value
    Type: String
    Default: ''
  PROHEADER:
    Description: PlayReady Object header
    Type: String
    Default: ''
  MYKEY:
    Description: Contentkey (base64)
    Type: String
    Default: ''
  RESOURCEID:
    Description: Resource ID. Should use the same content ID in MediaPackage configuration
    Type: String
    Default: ''
Mappings: {}
Conditions: {}
